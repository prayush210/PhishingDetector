Client-Side Phishing Detector Chrome Extension
1. Introduction
This project is a Google Chrome extension designed to detect potential phishing emails in real-time directly within the user's browser, with a strong emphasis on user privacy. It leverages a machine learning model (LinearSVC) trained on a hybrid feature set, including TF-IDF and over 50 handcrafted features, to classify emails as either "SAFE" or "PHISHING". All analysis and model inference occur client-side, meaning your email content never leaves your computer for the detection process.

Project Aim: To develop and evaluate a client-side Chrome extension capable of providing real-time phishing email detection using machine learning, prioritising user privacy by processing all data locally.

2. Key Features
Real-Time Detection: Scans emails on demand as you view them in Gmail.

Client-Side Machine Learning: Utilises an ONNX-runtime compatible LinearSVC model for in-browser inference.

Privacy-Focused: All email content analysis and ML inference happen locally in your browser. No email data is sent to external servers for detection by this extension.

Hybrid Feature Engineering: Combines TF-IDF for textual content analysis with over 50 handcrafted features designed to identify common phishing indicators.

Simple User Interface: Provides a clear "SAFE" or "PHISHING" status via a browser action popup.

3. Target Platform
Email Client: Gmail (when accessed via Google Chrome).

Browser: Google Chrome.

4. Installation Instructions
As this is a custom-developed extension (e.g., for a university project), it needs to be loaded into Chrome manually:

Obtain Extension Files:

Download or clone the project repository containing the extension files.

Ensure you have the complete set of files, including manifest.json, content.js, popup.html, popup.js, the js/ folder (with ort.min.js, ort-page-initializer.js, and .wasm files), and the model artifacts (linear_svc_model.onnx, tfidf_vocabulary.json, tfidf_idf_data.json, handcrafted_feature_names.json, selector_info.json).

Open Chrome Extensions Page:

Open Google Chrome.

Type chrome://extensions into the address bar and press Enter.

Enable Developer Mode:

In the top right corner of the Extensions page, toggle the "Developer mode" switch to the ON position.

Load Unpacked Extension:

Click the "Load unpacked" button that appears (usually on the top left).

In the file dialog, navigate to and select the root folder of the extension (the folder that directly contains the manifest.json file).

Click "Select Folder."

Verify Installation:

The "Phishing Detector Extension" should now appear in your list of installed extensions.

You should see its icon in the Chrome toolbar (you might need to click the puzzle piece icon to pin it).

5. How to Use
Navigate to Gmail: Open Gmail in your Google Chrome browser and log in.

Open an Email: Click on any email to view its content.

Activate the Extension:

Click on the "Phishing Detector Extension" icon in your Chrome toolbar. This will open a small popup window.

Scan the Email:

In the popup, click the "Scan Current Email" button.

View Result:

The extension will analyse the currently open email.

The status in the popup will update to indicate if the email appears "SAFE" or is a "Potential PHISHING" attempt.

You can open the browser's developer console (F12 -> Console tab) to see more detailed logging of the process if interested.

6. Technical Overview
Machine Learning Model: A Linear Support Vector Classifier (LinearSVC) was trained in Python using Scikit-learn.

Feature Engineering (Python):

The model was trained on features extracted from the "Phishing Email Dataset" (from Kaggle, by Al-Subaiey et al., 2024).

Features include TF-IDF (Term Frequency-Inverse Document Frequency) values from cleaned email text and over 50 handcrafted features derived using regular expressions and text analysis to capture structural, link-based, and keyword-based phishing indicators.

Feature selection (SelectKBest with Chi2) was used to reduce the feature set to the most impactful 2000 features.

Client-Side Deployment (JavaScript):

The trained LinearSVC model was converted to the ONNX (Open Neural Network Exchange) format.

The feature engineering pipeline (text cleaning, TF-IDF calculation, handcrafted feature extraction, feature combination, and selection) was replicated in JavaScript within the extension's content.js script.

Model parameters (TF-IDF vocabulary, IDF weights, handcrafted feature names, selector indices) are stored in JSON files packaged with the extension.

ONNX Runtime for Web (using WebAssembly) is employed to run the model inference directly in the browser.

Privacy: All processing occurs locally. Email content is extracted from the DOM by content.js, features are generated, and the model prediction is made without the email data leaving the user's machine.

7. Known Limitations
Accuracy: While the underlying Python model achieved high accuracy (e.g., [Your Python F1-Score]% F1-score) on its test set, and the extension performs well in practical tests, no ML model is 100% perfect. False positives (legitimate emails flagged as phishing) and false negatives (phishing emails missed) are possible.

Gmail DOM Dependency: The extension relies on specific CSS selectors to extract content from the Gmail interface. Changes to Gmail's HTML structure by Google could potentially break the content extraction functionality, requiring updates to the extension.

Language Focus: The current model and feature set were primarily developed and tested using an English-language email dataset. Performance on emails in other languages may vary and has not been formally evaluated.

Feature Parity: While significant effort was made to replicate the Python feature engineering pipeline in JavaScript, minor numerical discrepancies in some feature values were observed during unit testing. The end-to-end performance suggests the model is robust to these, but perfect 1:1 feature identity is a known challenge in cross-environment ML deployment.

8. Future Work Considerations (Brief)
Enhanced Feature Parity: Further investigation into resolving subtle JS/Python feature discrepancies.

Robust DOM Interaction: Develop more adaptive methods for Gmail content extraction.

Expanded Evaluation: Larger-scale testing and user studies.

Model Updates: Mechanism for updating the client-side model.

Advanced Obfuscation Handling: Features to counter obfuscated content.

9. Disclaimer
This Phishing Detector Extension is provided as an assistive tool to help identify potential phishing emails. It should be used as a supplementary aid and not as a sole determinant of an email's safety. Users should always exercise caution, critically assess email content, and avoid clicking suspicious links or providing sensitive information, regardless of the extension's classification. The developers assume no liability for decisions made based on the extension's output.

10. Author & Project Context
Author: [Your Name]

Project: [ Final Year Project, University of Surrey, Computer Science]

Date: May 2025